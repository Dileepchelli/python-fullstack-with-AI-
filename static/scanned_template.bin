# capture_fingerprint_template.py
import serial
import time

def capture_fingerprint_template(port="COM5", baudrate=57600):
    ser = serial.Serial(port, baudrate, timeout=2)

    # Step 1: GenImg command
    genimg_cmd = b'\xEF\x01\xFF\xFF\xFF\xFF\x01\x00\x03\x01\x00\x05'
    ser.write(genimg_cmd)
    response = ser.read(12)
    print(f"📷 GenImg Response: {response}")
    if response[9:10] != b'\x00':
        print("❌ Failed to capture fingerprint image")
        return None

    time.sleep(0.3)

    # Step 2: Img2Tz (store image to CharBuffer1)
    img2tz_cmd = b'\xEF\x01\xFF\xFF\xFF\xFF\x01\x00\x04\x02\x01\x00\x09'
    ser.write(img2tz_cmd)
    response = ser.read(12)
    print(f"🧠 Img2Tz Response: {response}")
    if response[9:10] != b'\x00':
        print("❌ Failed to convert image to CharBuffer")
        return None

    time.sleep(0.3)

    # Step 3: UpChar (upload template from CharBuffer1)
    upchar_cmd = b'\xEF\x01\xFF\xFF\xFF\xFF\x01\x00\x03\x08\x00\x0C'
    ser.write(upchar_cmd)

    template = bytearray()
    while True:
        header = ser.read(9)
        if len(header) < 9:
            break
        if header[6:7] not in [b'\x02', b'\x08']:
            print(f"❌ Invalid packet header: {header}")
            break

        length = int.from_bytes(header[7:9], 'big') - 2
        data = ser.read(length + 2)
        template.extend(data[:-2])

        if header[6:7] == b'\x08':
            break

    if len(template) == 512:
        print("✅ Fingerprint template captured (512 bytes)")
        with open("template.bin", "wb") as f:
            f.write(template)
        return template
    else:
        print("❌ Failed to get valid fingerprint template")
        return None

if __name__ == "__main__":
    capture_fingerprint_template()
